import React, { useState, useRef } from 'react';
import { Form, Input, Button, message, Tabs, Modal } from 'antd';
import { UserOutlined, LockOutlined } from '@ant-design/icons';
import ImageVerify from '../../components/ImageVerify';
import './index.less';

const { TabPane } = Tabs;

const Login = () => {
  const [form] = Form.useForm();
  const [activeTab, setActiveTab] = useState('1');
  const [imageVerified, setImageVerified] = useState(false);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  
  const videoRef = useRef();
  const streamRef = useRef();
  
  const handleImageSuccess = () => {
    setImageVerified(true);
    message.success('验证码正确');
  };
  
  const handleImageFail = () => {
    setImageVerified(false);
    message.error('验证码错误，请重试');
  };
  
  const startCamera = async () => {
    try {
      console.log('请求摄像头权限...');
      setIsModalVisible(true);
      setIsLoading(true);
      
      const stream = await navigator.mediaDevices.getUserMedia({ 
        video: { 
          width: 640, 
          height: 480 
        } 
      });
      console.log('摄像头权限已获取');
      
      streamRef.current = stream;
      videoRef.current.srcObject = stream;
      
      await new Promise((resolve) => {
        videoRef.current.onloadedmetadata = () => {
          console.log('摄像头已就绪，视频尺寸:', videoRef.current.videoWidth, videoRef.current.videoHeight);
          resolve();
        };
      });
      
      videoRef.current.play();
      console.log('视频开始播放');
      setIsLoading(false);
    } catch (error) {
      console.error('启动摄像头失败:', error);
      message.error('启动摄像头失败，请检查权限设置');
      setIsLoading(false);
      setIsModalVisible(false);
    }
  };
  
  const stopCamera = () => {
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop());
      streamRef.current = null;
    }
    if (videoRef.current) {
      videoRef.current.srcObject = null;
    }
    setIsModalVisible(false);
    setIsLoading(false);
  };
  
  const captureImage = () => {
    console.log('点击了视频画面');
    if (!videoRef.current) {
      console.error('视频未就绪');
      message.error('视频未就绪');
      return;
    }
    
    try {
      console.log('开始捕获图片...');
      const canvas = document.createElement('canvas');
      const video = videoRef.current;
      console.log('视频尺寸:', video.videoWidth, video.videoHeight);
      
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      const context = canvas.getContext('2d');
      context.drawImage(video, 0, 0, canvas.width, canvas.height);
      
      const imageData = canvas.toDataURL('image/png');
      console.log('图片数据长度:', imageData.length);
      console.log('当前图片地址:', imageData);
      
      // 在页面上显示图片地址
      const imageUrlElement = document.createElement('div');
      imageUrlElement.style.position = 'fixed';
      imageUrlElement.style.top = '10px';
      imageUrlElement.style.left = '10px';
      imageUrlElement.style.backgroundColor = 'white';
      imageUrlElement.style.padding = '10px';
      imageUrlElement.style.border = '1px solid black';
      imageUrlElement.style.zIndex = '9999';
      imageUrlElement.innerHTML = `图片地址: ${imageData.substring(0, 100)}...`;
      document.body.appendChild(imageUrlElement);
      
      message.success('图片已捕获');
    } catch (error) {
      console.error('捕获图片失败:', error);
      message.error('捕获图片失败');
    }
  };
  
  const handleSubmit = async (values) => {
    if (activeTab === '1' && !imageVerified) {
      message.error('请输入正确的验证码');
      return;
    }
    try {
      console.log('登录信息:', values);
      message.success('登录成功');
    } catch (error) {
      console.error('登录失败:', error);
      message.error('登录失败，请重试');
    }
  };
  
  return (
    <div className="login-container">
      <div className="login-box">
        <h2 className="login-title">用户登录</h2>
        
        <Tabs activeKey={activeTab} onChange={setActiveTab}>
          <TabPane tab="账号密码登录" key="1">
            <Form
              form={form}
              name="login"
              onFinish={handleSubmit}
              autoComplete="off"
            >
              <Form.Item
                name="username"
                rules={[{ required: true, message: '请输入用户名' }]}
              >
                <Input prefix={<UserOutlined />} placeholder="用户名" />
              </Form.Item>
              
              <Form.Item
                name="password"
                rules={[{ required: true, message: '请输入密码' }]}
              >
                <Input.Password prefix={<LockOutlined />} placeholder="密码" />
              </Form.Item>
              
              <Form.Item>
                <ImageVerify
                  onSuccess={handleImageSuccess}
                  onFail={handleImageFail}
                />
              </Form.Item>
              
              <Form.Item>
                <Button type="primary" htmlType="submit" block>
                  登录
                </Button>
              </Form.Item>
            </Form>
          </TabPane>
          
          <TabPane tab="拍照登录" key="2">
            <Form
              form={form}
              name="photoLogin"
              onFinish={handleSubmit}
              autoComplete="off"
            >
              <Form.Item>
                <div className="photo-container">
                  <div className="photo-title">拍照</div>
                  <div className="photo-wrapper">
                    <Button 
                      type="primary" 
                      onClick={startCamera}
                      loading={isLoading}
                      block
                    >
                      开始拍照
                    </Button>
                  </div>
                </div>
              </Form.Item>
              
              <Form.Item>
                <Button type="primary" htmlType="submit" block>
                  登录
                </Button>
              </Form.Item>
            </Form>
          </TabPane>
        </Tabs>
      </div>
      
      <Modal
        title="拍照"
        open={isModalVisible}
        onCancel={stopCamera}
        footer={null}
        width={500}
      >
        <div className="photo-modal">
          <div className="video-container">
            <video
              ref={videoRef}
              width="400"
              height="300"
              autoPlay
              muted
              onClick={captureImage}
              style={{ cursor: 'pointer' }}
            />
          </div>
          <div className="photo-tips">
            <p>请将脸部对准摄像头，保持光线充足</p>
            <p>点击视频画面可捕获当前图片</p>
          </div>
        </div>
      </Modal>
    </div>
  );
};

export default Login;
